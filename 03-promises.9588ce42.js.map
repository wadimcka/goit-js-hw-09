{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,SAAUC,SAASC,cAAc,qBACjCC,QAASF,SAASC,cAAc,oBAChCE,UAAWH,SAASC,cAAc,sBAClCG,OAAQJ,SAASC,cAAc,UAejC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IArBPT,EAAKM,OAAOW,iBAAiB,UAE7B,SAAmBC,GACjBA,EAAMC,iBACN,IAAMC,EAAYC,SAASrB,EAAKC,SAASqB,OACnCC,EAAOF,SAASrB,EAAKI,QAAQkB,OAC7BE,EAASH,SAASrB,EAAKK,UAAUiB,OACjCG,EAAO,CAAEL,YAAWG,OAAMC,UAChCE,QAAQC,IAAIF,GAiBd,SAAuBG,GACrB,I,IADuBR,EAAFQ,EAAER,UAAWG,EAAbK,EAAaL,KAAMC,EAAnBI,EAAmBJ,OAC/BK,EAAI,EAAGA,EAAIL,EAAQK,GAAK,EAAG,CAGlCtB,EAFesB,EAAI,EACPT,EAAYS,EAAIN,GAEzBO,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBX,EAAAkC,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE9D0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBX,EAAAkC,OAAOI,QAAQ,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,KAzBhE4B,CAAcZ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  inpDelay: document.querySelector('input[name=delay]'),\n  inpStep: document.querySelector('input[name=step]'),\n  inpAmount: document.querySelector('input[name=amount]'),\n  formEl: document.querySelector('.form'),\n};\n\nrefs.formEl.addEventListener('submit', getValues);\n\nfunction getValues(event) {\n  event.preventDefault();\n  const dataDelay = parseInt(refs.inpDelay.value);\n  const step = parseInt(refs.inpStep.value);\n  const amount = parseInt(refs.inpAmount.value);\n  const data = { dataDelay, step, amount };\n  console.log(data);\n  promiseCaller(data);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction promiseCaller({ dataDelay, step, amount }) {\n  for (let i = 0; i < amount; i += 1) {\n    let position = i + 1;\n    let delay = dataDelay + i * step;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","inpDelay","document","querySelector","inpStep","inpAmount","formEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","dataDelay","parseInt","value","step","amount","data","console","log","param1","i","then","param","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$promiseCaller"],"version":3,"file":"03-promises.9588ce42.js.map"}