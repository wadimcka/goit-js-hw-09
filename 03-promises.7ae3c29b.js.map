{"mappings":"oeAkDA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAM,CACVC,OAAQC,SAASC,cAAc,UAGjCH,EAAIC,OAAOG,iBAAiB,UAG5B,SAAsBC,GACpBA,EAAMC,iBACW,IAAIC,SAASP,EAAIC,QACzBO,SAAQ,CAACC,EAAOC,KAErBC,EAAKD,GAAQD,CAAK,IAQxB,UAAyBG,MAAAC,EAAKC,KAAEA,EAAIC,OAAEA,IACpCF,EAAQG,OAAOH,GACfC,EAAOE,OAAOF,GACdC,EAASC,OAAOD,GAEhB,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAAG,CAClC,IAAIC,EAAeL,EAAQI,EAAIH,EAC/BK,QAAQC,IAAI,eAAgBF,GAG5BG,EAFeJ,EAAI,EAEKC,GACrBI,MAAK,EAACC,SAAEA,EAAQX,MAAEA,MACjBd,EAAA0B,OAAOC,QAAQ,uBAAqBF,QAAiBX,MAAU,IAEhEc,OAAM,EAACH,SAAEA,EAAQX,MAAEA,MAClBd,EAAA0B,OAAOG,QAAQ,sBAAoBJ,QAAeX,MAAU,G,EAnBlEgB,CAAcjB,GACdQ,QAAQC,IAAI,OAAQT,E,IAZtB,MAAMA,EAAO,GAmCb,SAASU,EAAcE,EAAUX,GAC/B,OAAO,IAAIiB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEP,E,MAAUX,IAEpBmB,EAAO,C,SAAER,E,MAAUX,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const refs = {\n//   inpDelay: document.querySelector('input[name=delay]'),\n//   inpStep: document.querySelector('input[name=step]'),\n//   inpAmount: document.querySelector('input[name=amount]'),\n//   formEl: document.querySelector('.form'),\n// };\n\n// refs.formEl.addEventListener('submit', getValues);\n\n// function getValues(event) {\n//   event.preventDefault();\n//   const dataDelay = parseInt(refs.inpDelay.value);\n//   const step = parseInt(refs.inpStep.value);\n//   const amount = parseInt(refs.inpAmount.value);\n//   const data = { dataDelay, step, amount };\n//   console.log(data);\n//   promiseCaller(data);\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// function promiseCaller({ dataDelay, step, amount }) {\n//   for (let i = 0; i < amount; i += 1) {\n//     let position = i + 1;\n//     let delay = dataDelay + i * step;\n//     createPromise(position, delay)\n//       .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   }\n// }\n\n// 18.03.25\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst ref = {\n  formEl: document.querySelector('.form'),\n};\n\nref.formEl.addEventListener('submit', onFormSubmit);\nconst data = {};\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const formData = new FormData(ref.formEl);\n  formData.forEach((value, name) => {\n    {\n      data[name] = value;\n    }\n  });\n\n  promiseCaller(data);\n  console.log('data', data);\n}\n\nfunction promiseCaller({ delay, step, amount }) {\n  delay = Number(delay);\n  step = Number(step);\n  amount = Number(amount);\n\n  for (let i = 0; i < amount; i += 1) {\n    let currentDelay = delay + i * step;\n    console.log('currentDelay', currentDelay);\n    let position = i + 1;\n\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$ref","formEl","document","querySelector","addEventListener","event","preventDefault","FormData","forEach","value","name","$47d4ff9957288465$var$data","delay","delay1","step","amount","Number","i","currentDelay","console","log","$47d4ff9957288465$var$createPromise","then","position","Notify","success","catch","failure","$47d4ff9957288465$var$promiseCaller","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.7ae3c29b.js.map"}